{"ast":null,"code":"var _jsxFileName = \"D:\\\\react\\\\reactcourse\\\\src\\\\container\\\\Checkout\\\\ContactData\\\\ContactData.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './ContactData.css';\nimport Button from '../../../UI/Button/Button';\nimport axios from '../../../axios-orders';\nimport Spinner from '../../../UI/Spinner/Spinner';\nimport Input from '../../../UI/Input/Input';\nimport { func } from 'prop-types';\nimport { useHistory } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ContactData = props => {\n  _s();\n\n  const history = useHistory();\n  const [contact, setContact] = useState({\n    name: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'text',\n        placeholder: 'Your Name'\n      },\n      value: ''\n    },\n    street: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'text',\n        placeholder: 'Street'\n      },\n      value: ''\n    },\n    ZipCode: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'text',\n        placeholder: 'ZIP Code'\n      },\n      value: ''\n    },\n    country: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'text',\n        placeholder: 'Country'\n      },\n      value: ''\n    },\n    email: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'text',\n        placeholder: 'Your E-Mail'\n      },\n      value: ''\n    },\n    deliveryMethod: {\n      elementType: 'select',\n      elementConfig: {\n        options: [{\n          value: 'fastest',\n          displayValue: 'Fastest'\n        }, {\n          value: 'cheapest',\n          displayValue: 'Cheapest'\n        }]\n      },\n      value: ''\n    }\n  });\n  const [loading, setLoading] = useState(false);\n\n  function OrderHandler(event) {\n    event.preventDefault();\n    const formData = {};\n\n    for (let formElementIdentifier in contact) {\n      formData[formElementIdentifier] = contact[formElementIdentifier];\n    }\n\n    setLoading(true);\n    console.log(formData.value); //what we send to firebase database\n\n    const order = {\n      ingredient: props.ingredients,\n      price: props.price,\n      orderData: formData\n    };\n    axios.post('/orders.json', order).then(response => {\n      setLoading(false);\n      history.push('/');\n    }).catch(error => {\n      setLoading(false);\n    });\n  } //converting obj into array of contact\n\n\n  let formElementArray = [];\n\n  for (let key in contact) {\n    formElementArray.push({\n      id: key,\n      config: contact[key]\n    });\n  }\n\n  function InputChanged(event, inputIdentifier) {\n    //copying contact to updated contact\n    const updatedContact = { ...contact\n    }; //inputIdentifier=> shows which input field changed(key)\n\n    const updatedFormElement = { ...updatedContact[inputIdentifier]\n    };\n    updatedFormElement.value = event.target.value;\n    updatedContact[inputIdentifier] = updatedFormElement;\n    setContact(updatedContact);\n    console.log(inputIdentifier);\n  }\n\n  let form = /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: OrderHandler,\n    children: [formElementArray.map(formElement => /*#__PURE__*/_jsxDEV(Input, {\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      changed: event => InputChanged(event, formElement.id)\n    }, formElement.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"Button Success\",\n        children: \" Order\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 32\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 10\n  }, this);\n\n  if (loading) {\n    form = /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 14\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ContactData\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Enter your Contact Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 14\n    }, this), form]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ContactData, \"Gl5aX9PkOif6fDxDTS0eH6hNSkk=\", false, function () {\n  return [useHistory];\n});\n\n_c = ContactData;\nexport default ContactData;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContactData\");","map":{"version":3,"sources":["D:/react/reactcourse/src/container/Checkout/ContactData/ContactData.js"],"names":["React","useState","Button","axios","Spinner","Input","func","useHistory","ContactData","props","history","contact","setContact","name","elementType","elementConfig","type","placeholder","value","street","ZipCode","country","email","deliveryMethod","options","displayValue","loading","setLoading","OrderHandler","event","preventDefault","formData","formElementIdentifier","console","log","order","ingredient","ingredients","price","orderData","post","then","response","push","catch","error","formElementArray","key","id","config","InputChanged","inputIdentifier","updatedContact","updatedFormElement","target","form","map","formElement"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport './ContactData.css'\r\nimport Button from '../../../UI/Button/Button'\r\nimport axios from '../../../axios-orders'\r\nimport Spinner from '../../../UI/Spinner/Spinner'\r\nimport Input from '../../../UI/Input/Input'\r\nimport { func } from 'prop-types'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nconst ContactData = (props) => {\r\n    const history=useHistory()\r\n    const [contact,setContact]=useState({\r\n      name:{\r\n        elementType: 'input',\r\n        elementConfig:{\r\n          type:'text',\r\n          placeholder:'Your Name'\r\n        },\r\n        value:''\r\n      },\r\n      street:{\r\n        elementType: 'input',\r\n        elementConfig:{\r\n          type:'text',\r\n          placeholder:'Street'\r\n        },\r\n        value:''\r\n      },\r\n      ZipCode:{\r\n        elementType: 'input',\r\n        elementConfig:{\r\n          type:'text',\r\n          placeholder:'ZIP Code'\r\n        },\r\n        value:''\r\n      },\r\n      country:{\r\n        elementType: 'input',\r\n        elementConfig:{\r\n          type:'text',\r\n          placeholder:'Country'\r\n        },\r\n        value:''\r\n      },\r\n      email:{\r\n        elementType: 'input',\r\n        elementConfig:{\r\n          type:'text',\r\n          placeholder:'Your E-Mail'\r\n        },\r\n        value:''\r\n      },\r\n      deliveryMethod:{\r\n        elementType: 'select',\r\n        elementConfig:{\r\n          options:[\r\n            {value:'fastest', displayValue:'Fastest'},\r\n            {value:'cheapest', displayValue:'Cheapest'}\r\n          ]\r\n        },\r\n        value:''\r\n      },\r\n    })\r\n    \r\n    const [loading,setLoading]=useState(false)\r\nfunction OrderHandler(event){\r\n        event.preventDefault()\r\n        const formData={}\r\n        for(let formElementIdentifier in contact){\r\n          formData[formElementIdentifier]=contact[formElementIdentifier]\r\n        }\r\n            setLoading(true)\r\n            console.log(formData.value)\r\n    //what we send to firebase database\r\n    const order={\r\n      ingredient: props.ingredients,\r\n       price: props.price,\r\n       orderData: formData\r\n  }\r\naxios.post('/orders.json',order)\r\n.then(response=>{\r\n  setLoading(false)\r\nhistory.push('/')\r\n})\r\n.catch(error=>{\r\n  setLoading(false)\r\n\r\n})\r\n    }\r\n    //converting obj into array of contact\r\n    let formElementArray=[]\r\n    for(let key in contact){\r\n      formElementArray.push({\r\n        id:key,\r\n        config: contact[key]\r\n      })\r\n    }\r\n\r\n\r\n    function InputChanged(event,inputIdentifier) {\r\n      //copying contact to updated contact\r\n      const updatedContact={\r\n        ...contact\r\n      }\r\n      //inputIdentifier=> shows which input field changed(key)\r\n      const updatedFormElement={\r\n        ...updatedContact[inputIdentifier]\r\n      }\r\n      updatedFormElement.value=event.target.value\r\n      updatedContact[inputIdentifier]=updatedFormElement\r\n      setContact(updatedContact)\r\n      console.log(inputIdentifier)\r\n    }\r\n   \r\n    let form=(\r\n         <form onSubmit={OrderHandler}>\r\n           {formElementArray.map(formElement=>(\r\n            <Input \r\n            key={formElement.id}\r\n            elementType={formElement.config.elementType}\r\n            elementConfig={formElement.config.elementConfig}\r\n             value={formElement.config.value} \r\n             changed={(event)=>InputChanged(event,formElement.id)}\r\n             />\r\n           ))}\r\n        \r\n        <button type=\"submit\"> <span className=\"Button Success\"> Order</span></button>\r\n    </form>\r\n    )\r\n    if(loading){\r\n        form=<Spinner/>\r\n    }\r\n    return (\r\n        <div className=\"ContactData\">\r\n             <h4>Enter your Contact Data</h4>\r\n            {form}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ContactData\r\n"]},"metadata":{},"sourceType":"module"}