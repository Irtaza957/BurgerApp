{"ast":null,"code":"import _objectSpread from\"I:/BurgerBuilder/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"I:/BurgerBuilder/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useContext,useState}from'react';import'./ContactData.css';import axios from'../../../axios-orders';import Spinner from'../../../UI/Spinner/Spinner';import Input from'../../../UI/Input/Input';import{useHistory}from'react-router-dom';import{setAlertBanner}from'../../../Authentication';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var ContactData=function ContactData(props){var history=useHistory();var setAlert=useContext(setAlertBanner);var _useState=useState({name:{elementType:'input',elementConfig:{type:'text',placeholder:'Your Name'},value:'',validation:{required:true},valid:false,touched:false},street:{elementType:'input',elementConfig:{type:'text',placeholder:'Street'},value:'',validation:{required:true},valid:false,touched:false},ZipCode:{elementType:'input',elementConfig:{type:'text',placeholder:'ZIP Code'},value:'',validation:{required:true,minLength:5,maxLength:5},valid:false,touched:false},country:{elementType:'input',elementConfig:{type:'text',placeholder:'Country'},value:'',validation:{required:true},valid:false,touched:false},email:{elementType:'input',elementConfig:{type:'text',placeholder:'Your E-Mail'},value:'',validation:{required:true},valid:false,touched:false},deliveryMethod:{elementType:'select',elementConfig:{options:[{value:'fastest',displayValue:'Fastest'},{value:'cheapest',displayValue:'Cheapest'}]},value:'',valid:true,validation:{}}}),_useState2=_slicedToArray(_useState,2),contact=_useState2[0],setContact=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),formIsValid=_useState4[0],setformIsValid=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),loading=_useState6[0],setLoading=_useState6[1];//click to send order to databse\nfunction OrderHandler(event){event.preventDefault();var formData={};for(var formElementIdentifier in contact){formData[formElementIdentifier]=contact[formElementIdentifier].value;}setLoading(true);// console.log(formData)       \n//what we send to firebase database\nvar order={ingredient:props.ingredients,price:props.price,orderData:formData};axios.post('/orders.json',order).then(function(response){setAlert(true);setLoading(false);history.push('/');}).catch(function(error){setLoading(false);});}//converting obj into array of contact\nvar formElementArray=[];for(var key in contact){formElementArray.push({id:key,config:contact[key]});}// console.log(formElementArray)\nfunction CHeckValidity(value,rules){var isValid=true;if(!rules){return true;}if(rules.required){isValid=value.trim()!==\"\"&&isValid;}if(rules.minLength){isValid=value.length>=rules.minLength&&isValid;}if(rules.maxLength){isValid=value.length<=rules.maxLength&&isValid;}return isValid;}function InputChanged(event,inputIdentifier){//copying contact to updated contact\nvar updatedContact=_objectSpread({},contact);//inputIdentifier=> shows which input field changed(key)\nvar updatedFormElement=_objectSpread({},updatedContact[inputIdentifier]);updatedFormElement.value=event.target.value;updatedFormElement.valid=CHeckValidity(updatedFormElement.value,updatedFormElement.validation);updatedFormElement.touched=true;updatedContact[inputIdentifier]=updatedFormElement;//for disable button\nvar formisvalid=true;for(var _inputIdentifier in updatedContact){formisvalid=updatedContact[_inputIdentifier].valid&&formisvalid;}setContact(updatedContact);setformIsValid(formisvalid);}//dynamically adding form inputs\nvar form=/*#__PURE__*/_jsxs(\"form\",{onSubmit:OrderHandler,children:[formElementArray.map(function(formElement){return/*#__PURE__*/_jsx(Input,{elementType:formElement.config.elementType,elementConfig:formElement.config.elementConfig,value:formElement.config.value,invalid:!formElement.config.valid,shouldValidate:formElement.config.validation,touched:formElement.config.touched,changed:function changed(event){return InputChanged(event,formElement.id);}},formElement.id);}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"Button Success\",onClick:OrderHandler,disabled:!formIsValid,children:\" Order\"})]});if(loading){form=/*#__PURE__*/_jsx(Spinner,{});}return/*#__PURE__*/_jsxs(\"div\",{className:\"ContactData\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Enter your Contact Data\"}),form]});};export default ContactData;","map":{"version":3,"sources":["I:/BurgerBuilder/src/container/Checkout/ContactData/ContactData.js"],"names":["React","useContext","useState","axios","Spinner","Input","useHistory","setAlertBanner","ContactData","props","history","setAlert","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","ZipCode","minLength","maxLength","country","email","deliveryMethod","options","displayValue","contact","setContact","formIsValid","setformIsValid","loading","setLoading","OrderHandler","event","preventDefault","formData","formElementIdentifier","order","ingredient","ingredients","price","orderData","post","then","response","push","catch","error","formElementArray","key","id","config","CHeckValidity","rules","isValid","trim","length","InputChanged","inputIdentifier","updatedContact","updatedFormElement","target","formisvalid","form","map","formElement"],"mappings":"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","sourcesContent":["import React, {  useContext, useState } from 'react'\r\nimport './ContactData.css'\r\nimport axios from '../../../axios-orders'\r\nimport Spinner from '../../../UI/Spinner/Spinner'\r\nimport Input from '../../../UI/Input/Input'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { setAlertBanner } from '../../../Authentication'\r\nconst ContactData = (props) => {\r\n    const history=useHistory()\r\n    const setAlert=useContext(setAlertBanner)\r\n    const [contact,setContact]=useState({\r\n      name:{\r\n        elementType: 'input',\r\n        elementConfig:{\r\n          type:'text',\r\n          placeholder:'Your Name'\r\n        },\r\n        value:'',\r\n        validation:{\r\n          required: true\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      },\r\n      street:{\r\n        elementType: 'input',\r\n        elementConfig:{\r\n          type:'text',\r\n          placeholder:'Street'\r\n        },\r\n        value:'',\r\n        validation:{\r\n          required: true\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      },\r\n      ZipCode:{\r\n        elementType: 'input',\r\n        elementConfig:{\r\n          type:'text',\r\n          placeholder:'ZIP Code'\r\n        },\r\n        value:'',\r\n        validation:{\r\n          required: true,\r\n          minLength: 5,\r\n          maxLength: 5\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      },\r\n      country:{\r\n        elementType: 'input',\r\n        elementConfig:{\r\n          type:'text',\r\n          placeholder:'Country'\r\n        },\r\n        value:'',\r\n        validation:{\r\n          required: true\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      },\r\n      email:{\r\n        elementType: 'input',\r\n        elementConfig:{\r\n          type:'text',\r\n          placeholder:'Your E-Mail'\r\n        },\r\n        value:'',\r\n        validation:{\r\n          required: true\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      },\r\n      deliveryMethod:{\r\n        elementType: 'select',\r\n        elementConfig:{\r\n          options:[\r\n            {value:'fastest', displayValue:'Fastest'},\r\n            {value:'cheapest', displayValue:'Cheapest'}\r\n          ]\r\n        },\r\n        value:'',\r\n        valid:true,\r\n        validation: {}\r\n      },\r\n    })\r\n    const [formIsValid,setformIsValid]=useState(false)\r\n    const [loading,setLoading]=useState(false)\r\n    //click to send order to databse\r\nfunction OrderHandler(event){\r\n        event.preventDefault()\r\n        const formData={}\r\n        for(let formElementIdentifier in contact){\r\n          formData[formElementIdentifier]=contact[formElementIdentifier].value\r\n    \r\n        }\r\n            setLoading(true)\r\n            // console.log(formData)       \r\n    //what we send to firebase database\r\n    const order={\r\n      ingredient: props.ingredients,\r\n       price: props.price,\r\n       orderData: formData\r\n  }\r\naxios.post('/orders.json',order)\r\n.then(response=>{\r\nsetAlert(true)\r\n  setLoading(false)\r\n \r\nhistory.push('/')\r\n})\r\n.catch(error=>{\r\n  setLoading(false)\r\n\r\n})\r\n    }\r\n    //converting obj into array of contact\r\n    let formElementArray=[]\r\n    for(let key in contact){\r\n      formElementArray.push({\r\n        id:key,\r\n        config: contact[key]\r\n      })\r\n    }\r\n// console.log(formElementArray)\r\n    function CHeckValidity(value,rules){\r\n      let isValid=true\r\n      if(!rules){\r\n        return true\r\n      }\r\n      if(rules.required){\r\n        isValid=value.trim()!==\"\" && isValid\r\n      }\r\n      if(rules.minLength){\r\n        isValid=value.length >= rules.minLength && isValid\r\n      }\r\n      if(rules.maxLength){\r\n        isValid=value.length <= rules.maxLength && isValid\r\n      }\r\n      return isValid\r\n    }\r\n\r\n    function InputChanged(event,inputIdentifier) {\r\n      //copying contact to updated contact\r\n      const updatedContact={\r\n        ...contact\r\n      }\r\n      //inputIdentifier=> shows which input field changed(key)\r\n      const updatedFormElement={\r\n        ...updatedContact[inputIdentifier]\r\n      }\r\n      updatedFormElement.value=event.target.value\r\n      updatedFormElement.valid=CHeckValidity(updatedFormElement.value,updatedFormElement.validation)\r\n      updatedFormElement.touched=true\r\n\r\n      updatedContact[inputIdentifier]=updatedFormElement\r\n//for disable button\r\n      let formisvalid=true\r\n      for(let inputIdentifier in updatedContact){\r\n        formisvalid=updatedContact[inputIdentifier].valid && formisvalid\r\n      }\r\n      setContact(updatedContact)\r\n      setformIsValid(formisvalid)\r\n    }\r\n   //dynamically adding form inputs\r\n    let form=(\r\n         <form onSubmit={OrderHandler}>\r\n           {formElementArray.map(formElement=>(\r\n            <Input \r\n            key={formElement.id}\r\n            elementType={formElement.config.elementType}\r\n            elementConfig={formElement.config.elementConfig}\r\n             value={formElement.config.value} \r\n             invalid={!formElement.config.valid}\r\n             shouldValidate={formElement.config.validation}\r\n             touched={formElement.config.touched}\r\n             changed={(event)=>InputChanged(event,formElement.id)}\r\n             />\r\n           ))}\r\n        <button type=\"submit\" className=\"Button Success\" onClick={OrderHandler} disabled={!formIsValid}> Order</button>\r\n    </form>\r\n    )\r\n    if(loading){\r\n        form=<Spinner/>\r\n    }\r\n    return (\r\n        <div className=\"ContactData\">\r\n             <h4>Enter your Contact Data</h4>\r\n            {form}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ContactData\r\n"]},"metadata":{},"sourceType":"module"}