{"ast":null,"code":"var _jsxFileName = \"D:\\\\reactProjects\\\\BurgerBuilder\\\\src\\\\container\\\\Checkout\\\\ContactData\\\\ContactData.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useContext, useState } from 'react';\nimport './ContactData.css';\nimport Button from '../../../UI/Button/Button';\nimport axios from '../../../axios-orders';\nimport Spinner from '../../../UI/Spinner/Spinner';\nimport Input from '../../../UI/Input/Input';\nimport { func } from 'prop-types';\nimport { useHistory } from 'react-router-dom';\nimport { setAlertBanner } from '../../../Authentication';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ContactData = props => {\n  _s();\n\n  const history = useHistory();\n  const setAlert = useContext(alertBanner);\n  const [contact, setContact] = useState({\n    name: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'text',\n        placeholder: 'Your Name'\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    street: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'text',\n        placeholder: 'Street'\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    ZipCode: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'text',\n        placeholder: 'ZIP Code'\n      },\n      value: '',\n      validation: {\n        required: true,\n        minLength: 5,\n        maxLength: 5\n      },\n      valid: false,\n      touched: false\n    },\n    country: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'text',\n        placeholder: 'Country'\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    email: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'text',\n        placeholder: 'Your E-Mail'\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    deliveryMethod: {\n      elementType: 'select',\n      elementConfig: {\n        options: [{\n          value: 'fastest',\n          displayValue: 'Fastest'\n        }, {\n          value: 'cheapest',\n          displayValue: 'Cheapest'\n        }]\n      },\n      value: '',\n      valid: true,\n      validation: {}\n    }\n  });\n  const [formIsValid, setformIsValid] = useState(false);\n  const [loading, setLoading] = useState(false); //click to send order to databse\n\n  function OrderHandler(event) {\n    event.preventDefault();\n    const formData = {};\n\n    for (let formElementIdentifier in contact) {\n      formData[formElementIdentifier] = contact[formElementIdentifier].value;\n    }\n\n    setLoading(true); // console.log(formData)       \n    //what we send to firebase database\n\n    const order = {\n      ingredient: props.ingredients,\n      price: props.price,\n      orderData: formData\n    };\n    axios.post('/orders.json', order).then(response => {\n      alert = true;\n      setLoading(false);\n      history.push('/');\n    }).catch(error => {\n      setLoading(false);\n    });\n  } //converting obj into array of contact\n\n\n  let formElementArray = [];\n\n  for (let key in contact) {\n    formElementArray.push({\n      id: key,\n      config: contact[key]\n    });\n  }\n\n  function CHeckValidity(value, rules) {\n    let isValid = true;\n\n    if (!rules) {\n      return true;\n    }\n\n    if (rules.required) {\n      isValid = value.trim() !== \"\" && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    return isValid;\n  }\n\n  function InputChanged(event, inputIdentifier) {\n    //copying contact to updated contact\n    const updatedContact = { ...contact\n    }; //inputIdentifier=> shows which input field changed(key)\n\n    const updatedFormElement = { ...updatedContact[inputIdentifier]\n    };\n    updatedFormElement.value = event.target.value;\n    updatedFormElement.valid = CHeckValidity(updatedFormElement.value, updatedFormElement.validation);\n    updatedFormElement.touched = true;\n    console.log(updatedFormElement);\n    updatedContact[inputIdentifier] = updatedFormElement; //for disable button\n\n    let formisvalid = true;\n\n    for (let inputIdentifier in updatedContact) {\n      formisvalid = updatedContact[inputIdentifier].valid && formisvalid;\n    }\n\n    setContact(updatedContact);\n    setformIsValid(formisvalid);\n  } //dynamically adding form inputs\n\n\n  let form = /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: OrderHandler,\n    children: [formElementArray.map(formElement => /*#__PURE__*/_jsxDEV(Input, {\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      invalid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      touched: formElement.config.touched,\n      changed: event => InputChanged(event, formElement.id)\n    }, formElement.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 13\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      className: \"Button Success\",\n      onClick: OrderHandler,\n      disabled: !formIsValid,\n      children: \" Order\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 10\n  }, this);\n\n  if (loading) {\n    form = /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 14\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ContactData\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Enter your Contact Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 14\n    }, this), form]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 194,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ContactData, \"8+qppM2p9ODTSC/HXu4vca0kML8=\", false, function () {\n  return [useHistory];\n});\n\n_c = ContactData;\nexport default ContactData;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContactData\");","map":{"version":3,"sources":["D:/reactProjects/BurgerBuilder/src/container/Checkout/ContactData/ContactData.js"],"names":["React","createContext","useContext","useState","Button","axios","Spinner","Input","func","useHistory","setAlertBanner","ContactData","props","history","setAlert","alertBanner","contact","setContact","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","ZipCode","minLength","maxLength","country","email","deliveryMethod","options","displayValue","formIsValid","setformIsValid","loading","setLoading","OrderHandler","event","preventDefault","formData","formElementIdentifier","order","ingredient","ingredients","price","orderData","post","then","response","alert","push","catch","error","formElementArray","key","id","config","CHeckValidity","rules","isValid","trim","length","InputChanged","inputIdentifier","updatedContact","updatedFormElement","target","console","log","formisvalid","form","map","formElement"],"mappings":"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","sourcesContent":["import React, { createContext, useContext, useState } from 'react'\r\nimport './ContactData.css'\r\nimport Button from '../../../UI/Button/Button'\r\nimport axios from '../../../axios-orders'\r\nimport Spinner from '../../../UI/Spinner/Spinner'\r\nimport Input from '../../../UI/Input/Input'\r\nimport { func } from 'prop-types'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { setAlertBanner } from '../../../Authentication'\r\nconst ContactData = (props) => {\r\n    const history=useHistory()\r\n    const setAlert=useContext(alertBanner)\r\n    const [contact,setContact]=useState({\r\n      name:{\r\n        elementType: 'input',\r\n        elementConfig:{\r\n          type:'text',\r\n          placeholder:'Your Name'\r\n        },\r\n        value:'',\r\n        validation:{\r\n          required: true\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      },\r\n      street:{\r\n        elementType: 'input',\r\n        elementConfig:{\r\n          type:'text',\r\n          placeholder:'Street'\r\n        },\r\n        value:'',\r\n        validation:{\r\n          required: true\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      },\r\n      ZipCode:{\r\n        elementType: 'input',\r\n        elementConfig:{\r\n          type:'text',\r\n          placeholder:'ZIP Code'\r\n        },\r\n        value:'',\r\n        validation:{\r\n          required: true,\r\n          minLength: 5,\r\n          maxLength: 5\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      },\r\n      country:{\r\n        elementType: 'input',\r\n        elementConfig:{\r\n          type:'text',\r\n          placeholder:'Country'\r\n        },\r\n        value:'',\r\n        validation:{\r\n          required: true\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      },\r\n      email:{\r\n        elementType: 'input',\r\n        elementConfig:{\r\n          type:'text',\r\n          placeholder:'Your E-Mail'\r\n        },\r\n        value:'',\r\n        validation:{\r\n          required: true\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      },\r\n      deliveryMethod:{\r\n        elementType: 'select',\r\n        elementConfig:{\r\n          options:[\r\n            {value:'fastest', displayValue:'Fastest'},\r\n            {value:'cheapest', displayValue:'Cheapest'}\r\n          ]\r\n        },\r\n        value:'',\r\n        valid:true,\r\n        validation: {}\r\n      },\r\n    })\r\n    const [formIsValid,setformIsValid]=useState(false)\r\n    const [loading,setLoading]=useState(false)\r\n    //click to send order to databse\r\nfunction OrderHandler(event){\r\n        event.preventDefault()\r\n        const formData={}\r\n        for(let formElementIdentifier in contact){\r\n          formData[formElementIdentifier]=contact[formElementIdentifier].value\r\n    \r\n        }\r\n            setLoading(true)\r\n            // console.log(formData)       \r\n    //what we send to firebase database\r\n    const order={\r\n      ingredient: props.ingredients,\r\n       price: props.price,\r\n       orderData: formData\r\n  }\r\naxios.post('/orders.json',order)\r\n.then(response=>{\r\n  alert=true\r\n  setLoading(false)\r\n  \r\nhistory.push('/')\r\n})\r\n.catch(error=>{\r\n  setLoading(false)\r\n\r\n})\r\n    }\r\n    //converting obj into array of contact\r\n    let formElementArray=[]\r\n    for(let key in contact){\r\n      formElementArray.push({\r\n        id:key,\r\n        config: contact[key]\r\n      })\r\n    }\r\n\r\n    function CHeckValidity(value,rules){\r\n      let isValid=true\r\n      if(!rules){\r\n        return true\r\n      }\r\n      if(rules.required){\r\n        isValid=value.trim()!==\"\" && isValid\r\n      }\r\n      if(rules.minLength){\r\n        isValid=value.length >= rules.minLength && isValid\r\n      }\r\n      if(rules.maxLength){\r\n        isValid=value.length <= rules.maxLength && isValid\r\n      }\r\n      return isValid\r\n    }\r\n\r\n    function InputChanged(event,inputIdentifier) {\r\n      //copying contact to updated contact\r\n      const updatedContact={\r\n        ...contact\r\n      }\r\n      //inputIdentifier=> shows which input field changed(key)\r\n      const updatedFormElement={\r\n        ...updatedContact[inputIdentifier]\r\n      }\r\n      updatedFormElement.value=event.target.value\r\n      updatedFormElement.valid=CHeckValidity(updatedFormElement.value,updatedFormElement.validation)\r\n      updatedFormElement.touched=true\r\n      console.log(updatedFormElement)\r\n      updatedContact[inputIdentifier]=updatedFormElement\r\n//for disable button\r\n      let formisvalid=true\r\n      for(let inputIdentifier in updatedContact){\r\n        formisvalid=updatedContact[inputIdentifier].valid && formisvalid\r\n      }\r\n      setContact(updatedContact)\r\n      setformIsValid(formisvalid)\r\n    }\r\n   //dynamically adding form inputs\r\n    let form=(\r\n         <form onSubmit={OrderHandler}>\r\n           {formElementArray.map(formElement=>(\r\n            <Input \r\n            key={formElement.id}\r\n            elementType={formElement.config.elementType}\r\n            elementConfig={formElement.config.elementConfig}\r\n             value={formElement.config.value} \r\n             invalid={!formElement.config.valid}\r\n             shouldValidate={formElement.config.validation}\r\n             touched={formElement.config.touched}\r\n             changed={(event)=>InputChanged(event,formElement.id)}\r\n             />\r\n           ))}\r\n        <button type=\"submit\" className=\"Button Success\" onClick={OrderHandler} disabled={!formIsValid}> Order</button>\r\n    </form>\r\n    )\r\n    if(loading){\r\n        form=<Spinner/>\r\n    }\r\n    return (\r\n        <div className=\"ContactData\">\r\n             <h4>Enter your Contact Data</h4>\r\n            {form}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ContactData\r\n"]},"metadata":{},"sourceType":"module"}